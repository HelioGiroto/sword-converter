

* Notes

** [2018-01-11 Thu 03:57]  The SWORD project code base is a mostly undocumented mess

Maybe I shouldn't criticize too harshly, but man, what a mess.  I mean, the [[https://www.crosswire.org/wiki/DevTools:SWORD][developer tools wiki]] (which is not kept in sync with the code) actually says:

#+BEGIN_QUOTE
The API primer is quite old and has not been updated for a long time.If in doubt, consult the API Doxygen documentation (see below) and look at code samples within the source tree under /examples
#+END_QUOTE

But that's not the worst part.  The worst part is what they say about the [[https://www.crosswire.org/wiki/File_Formats][file formats]]:

#+BEGIN_QUOTE
Other than the source code for the SWORD API, there is no documentation for the file format of a SWORD module. The intention is that the SWORD API (or the JSword implementation) is used directly or via other language bindings.

Our module file format is proprietary in the sense that we see no need to document it and certainly no need to stick to it. We change it when we need to. We therefore do not encourage direct interaction with it, but firmly recommend use of the API (either C++ or Java). This is the place where we seek stability and consistency.
#+END_QUOTE

Good grief.

** [2018-01-12 Fri 11:10]  Working C++ converter!

Well, with some stumbling around I was able to modify the =lookup= example utility to output JSON.  It converts the entire ESV module in about 4 seconds!  That's in contrast to the multithreaded Python script that calls Diatheke for each individual verse, which takes over 20 minutes.

[2018-01-12 Fri 11:46]  Well, that works in the 1.8.0 source directory, but the executable it produced only works when called from a shell script in the source directory that is generated by the build process.  I guess if I installed the whole package (libsword and all), the resulting executable would work from elsewhere.

So I tried to make a version for 1.6.2 (the version in Ubuntu Trusty), and it almost works correctly, but the verse text has =[]= in random places.  I don't know if it's because of something I did wrong or changes in the SWORD API.  I had to add some code I found on StackOverflow to trim strings, and I had to convert some of the old API output to =std::string=.

So the problems now are:

+  The 1.8.0 version only runs from within the source directory.
+  The 1.6.2 version has garbage in the output.

If I could build the 1.8.0 version statically, that would probably solve it, but I've no idea how to just build one executable in a project statically.  Might be a simple switch in a command, or it might be much more complex.

I might be able to fix the output in the 1.6.2 version, but since I don't understand exactly what's going on with the buffers and strings and such, I'm not sure what to do.

[2018-01-12 Fri 12:05]  I found [[https://stackoverflow.com/a/15475134][this StackOverflow answer]], and I modified the Makefile in both versions (in the =examples/cmdline= directory) to add those flags to =CXXCOMPILE= and =CXXLINK=, and it made the =examples/cmdline/lookup= file a binary instead of the shell script, but apparently only the =libsword= stuff was statically linked, because =ldd= shows that it's still dynamically linked to a bunch of general shared libraries like =libc=.  But the binary does work when I copy it out of the source directory, so I guess it will do.  This lets me statically link the 1.8.0 version of =libsword=, so I can use it with 1.6.2 still installed on the system.
